{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*\nCopyright (c) 2014 Bryan Hughes <bryan@nebri.us>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the 'Software'), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport { EventEmitter } from 'events';\n\n// Constants\nconst INPUT_MODE = 0;\nconst OUTPUT_MODE = 1;\nconst ANALOG_MODE = 2;\nconst PWM_MODE = 3;\nconst SERVO_MODE = 4;\nconst UNKNOWN_MODE = 99;\n\nconst LOW = 0;\nconst HIGH = 1;\n\nconst LED_PIN = -1;\n\nconst SOFTWARE_PWM_RANGE = 1000;\nconst SOFTWARE_PWM_FREQUENCY = 50;\n\n// Settings\nconst DEFAULT_SERVO_MIN = 1000;\nconst DEFAULT_SERVO_MAX = 2000;\nconst DIGITAL_READ_UPDATE_RATE = 19;\n\n// Private symbols\nconst isReady = Symbol('isReady');\nconst pins = Symbol('pins');\nconst instances = Symbol('instances');\nconst analogPins = Symbol('analogPins');\nconst getPinInstance = Symbol('getPinInstance');\nconst i2c = Symbol('i2c');\nconst i2cDelay = Symbol('i2cDelay');\nconst i2cRead = Symbol('i2cRead');\nconst i2cCheckAlive = Symbol('i2cCheckAlive');\nconst pinMode = Symbol('pinMode');\nconst serial = Symbol('serial');\nconst serialQueue = Symbol('serialQueue');\nconst addToSerialQueue = Symbol('addToSerialQueue');\nconst serialPump = Symbol('serialPump');\nconst isSerialProcessing = Symbol('isSerialProcessing');\nconst isSerialOpen = Symbol('isSerialOpen');\n\nconst raspiModule = Symbol('raspiModule');\nconst raspiBoardModule = Symbol('raspiBoardModule');\nconst raspiGpioModule = Symbol('raspiGpioModule');\nconst raspiI2cModule = Symbol('raspiI2cModule');\nconst raspiLedModule = Symbol('raspiLedModule');\nconst raspiPwmModule = Symbol('raspiPwmModule');\nconst raspiSerialModule = Symbol('raspiSerialModule');\nconst raspiSoftPwmModule = Symbol('raspiSoftPwmModule');\n\nconst SERIAL_ACTION_WRITE = 'SERIAL_ACTION_WRITE';\nconst SERIAL_ACTION_CLOSE = 'SERIAL_ACTION_CLOSE';\nconst SERIAL_ACTION_FLUSH = 'SERIAL_ACTION_FLUSH';\nconst SERIAL_ACTION_CONFIG = 'SERIAL_ACTION_CONFIG';\nconst SERIAL_ACTION_READ = 'SERIAL_ACTION_READ';\nconst SERIAL_ACTION_STOP = 'SERIAL_ACTION_STOP';\n\nfunction bufferToArray(buffer) {\n  const array = Array(buffer.length);\n  for (let i = 0; i < buffer.length; i++) {\n    array[i] = buffer[i];\n  }\n  return array;\n}\n\nexport class RaspiIOCore extends EventEmitter {\n\n  constructor(options) {\n    super();\n\n    if (!options) {\n      throw new Error('Options are required');\n    }\n    const { includePins, excludePins, enableSerial, enableSoftPwm = false, platform } = options;\n\n    if (!platform) {\n      throw new Error('\"platform\" option is required');\n    }\n    if (!platform['raspi']) {\n      throw new Error('\"raspi\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-board']) {\n      throw new Error('\"raspi-board\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-gpio']) {\n      throw new Error('\"raspi-gpio\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-i2c']) {\n      throw new Error('\"raspi-i2c\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-led']) {\n      throw new Error('\"raspi-led\" module is missing from \"platform\" option');\n    }\n    if (!platform['raspi-pwm']) {\n      throw new Error('\"raspi-pwm\" module is missing from \"platform\" option');\n    }\n    if (enableSerial && !platform['raspi-serial']) {\n      throw new Error('\"enableSerial\" is true and \"raspi-serial\" module is missing from \"platform\" option');\n    }\n    if (enableSoftPwm && !platform['raspi-soft-pwm']) {\n      throw new Error('\"enableSoftPwm\" is true and \"raspi-soft-pwm\" module is missing from \"platform\" option');\n    }\n\n    Object.defineProperties(this, {\n\n      [raspiModule]: {\n        writable: true,\n        value: platform['raspi']\n      },\n\n      [raspiBoardModule]: {\n        writable: true,\n        value: platform['raspi-board']\n      },\n\n      [raspiGpioModule]: {\n        writable: true,\n        value: platform['raspi-gpio']\n      },\n\n      [raspiI2cModule]: {\n        writable: true,\n        value: platform['raspi-i2c']\n      },\n\n      [raspiLedModule]: {\n        writable: true,\n        value: platform['raspi-led']\n      },\n\n      [raspiPwmModule]: {\n        writable: true,\n        value: platform['raspi-pwm']\n      },\n\n      [raspiSerialModule]: {\n        writable: true,\n        value: platform['raspi-serial']\n      },\n\n      [raspiSoftPwmModule]: {\n        writable: true,\n        value: platform['raspi-soft-pwm']\n      }\n\n    });\n\n    Object.defineProperties(this, {\n\n      name: {\n        enumerable: true,\n        value: 'RaspberryPi-IO'\n      },\n\n      [instances]: {\n        writable: true,\n        value: []\n      },\n\n      [isReady]: {\n        writable: true,\n        value: false\n      },\n      isReady: {\n        enumerable: true,\n        get() {\n          return this[isReady];\n        }\n      },\n\n      [pins]: {\n        writable: true,\n        value: []\n      },\n      pins: {\n        enumerable: true,\n        get() {\n          return this[pins];\n        }\n      },\n\n      [analogPins]: {\n        writable: true,\n        value: []\n      },\n      analogPins: {\n        enumerable: true,\n        get() {\n          return this[analogPins];\n        }\n      },\n\n      [i2c]: {\n        writable: true,\n        value: new this[raspiI2cModule].I2C()\n      },\n\n      [i2cDelay]: {\n        writable: true,\n        value: 0\n      },\n\n      [serial]: {\n        writable: true,\n        value: new this[raspiSerialModule].Serial()\n      },\n\n      [serialQueue]: {\n        value: []\n      },\n\n      [isSerialProcessing]: {\n        writable: true,\n        value: false\n      },\n\n      [isSerialOpen]: {\n        writable: true,\n        value: false\n      },\n\n      MODES: {\n        enumerable: true,\n        value: Object.freeze({\n          INPUT: INPUT_MODE,\n          OUTPUT: OUTPUT_MODE,\n          ANALOG: ANALOG_MODE,\n          PWM: PWM_MODE,\n          SERVO: SERVO_MODE\n        })\n      },\n\n      HIGH: {\n        enumerable: true,\n        value: HIGH\n      },\n      LOW: {\n        enumerable: true,\n        value: LOW\n      },\n\n      defaultLed: {\n        enumerable: true,\n        value: LED_PIN\n      }\n    });\n\n    if (enableSerial) {\n      Object.defineProperties(this, {\n\n        [raspiSoftPwmModule]: {\n          writable: true,\n          value: platform['raspi-soft-pwm']\n        },\n\n        SERIAL_PORT_IDs: {\n          enumerable: true,\n          value: Object.freeze({\n            HW_SERIAL0: this[raspiSerialModule].DEFAULT_PORT,\n            DEFAULT: this[raspiSerialModule].DEFAULT_PORT\n          })\n        }\n\n      });\n    } else {\n      Object.defineProperties(this, {\n\n        SERIAL_PORT_IDs: {\n          enumerable: true,\n          value: Object.freeze({})\n        }\n\n      });\n    }\n\n    this[raspiModule].init(() => {\n      let pinMappings = this[raspiBoardModule].getPins();\n      this[pins] = [];\n\n      // Slight hack to get the LED in there, since it's not actually a pin\n      pinMappings[LED_PIN] = {\n        pins: [ LED_PIN ],\n        peripherals: [ 'gpio' ]\n      };\n\n      if (includePins && excludePins) {\n        throw new Error('\"includePins\" and \"excludePins\" cannot be specified at the same time');\n      }\n\n      if (Array.isArray(includePins)) {\n        const newPinMappings = {};\n        for (const pin of includePins) {\n          const normalizedPin = this[raspiBoardModule].getPinNumber(pin);\n          if (normalizedPin === null) {\n            throw new Error(`Invalid pin \"${pin}\" specified in includePins`);\n          }\n          newPinMappings[normalizedPin] = pinMappings[normalizedPin];\n        }\n        pinMappings = newPinMappings;\n      } else if (Array.isArray(excludePins)) {\n        pinMappings = Object.assign({}, pinMappings);\n        for (const pin of excludePins) {\n          const normalizedPin = this[raspiBoardModule].getPinNumber(pin);\n          if (normalizedPin === null) {\n            throw new Error(`Invalid pin \"${pin}\" specified in excludePins`);\n          }\n          delete pinMappings[normalizedPin];\n        }\n      }\n\n      Object.keys(pinMappings).forEach((pin) => {\n        const pinInfo = pinMappings[pin];\n        const supportedModes = [];\n        // We don't want I2C to be used for anything else, since changing the\n        // pin mode makes it unable to ever do I2C again.\n        if (pinInfo.peripherals.indexOf('i2c') == -1 && pinInfo.peripherals.indexOf('uart') == -1) {\n          if (pin == LED_PIN) {\n            supportedModes.push(OUTPUT_MODE);\n          } else if (pinInfo.peripherals.indexOf('gpio') != -1) {\n            supportedModes.push(INPUT_MODE, OUTPUT_MODE);\n          }\n          if (pinInfo.peripherals.indexOf('pwm') != -1) {\n            supportedModes.push(PWM_MODE, SERVO_MODE);\n          } else if (enableSoftPwm === true && pinInfo.peripherals.indexOf('gpio') !== -1) {\n            supportedModes.push(PWM_MODE, SERVO_MODE);\n          }\n        }\n        const instance = this[instances][pin] = {\n          peripheral: null,\n          mode: supportedModes.indexOf(OUTPUT_MODE) == -1 ? UNKNOWN_MODE : OUTPUT_MODE,\n\n          // Used to cache the previously written value for reading back in OUTPUT mode\n          // We start with undefined because it's in an unknown state\n          previousWrittenValue: undefined,\n\n          // Used to set the default min and max values\n          min: DEFAULT_SERVO_MIN,\n          max: DEFAULT_SERVO_MAX,\n\n          // Used to track if this pin is capable of hardware PWM\n          isHardwarePwm: pinInfo.peripherals.indexOf('pwm') !== -1\n        };\n        this[pins][pin] = Object.create(null, {\n          supportedModes: {\n            enumerable: true,\n            value: Object.freeze(supportedModes)\n          },\n          mode: {\n            enumerable: true,\n            get() {\n              return instance.mode;\n            }\n          },\n          value: {\n            enumerable: true,\n            get() {\n              switch (instance.mode) {\n                case INPUT_MODE:\n                  return instance.peripheral.read();\n                case OUTPUT_MODE:\n                  return instance.previousWrittenValue;\n                default:\n                  return null;\n              }\n            },\n            set(value) {\n              if (instance.mode == OUTPUT_MODE) {\n                instance.peripheral.write(value);\n              }\n            }\n          },\n          report: {\n            enumerable: true,\n            value: 1\n          },\n          analogChannel: {\n            enumerable: true,\n            value: 127\n          }\n        });\n        if (instance.mode == OUTPUT_MODE) {\n          this.pinMode(pin, OUTPUT_MODE);\n          this.digitalWrite(pin, LOW);\n        }\n      });\n\n      // Fill in the holes, sins pins are sparse on the A+/B+/2\n      for (let i = 0; i < this[pins].length; i++) {\n        if (!this[pins][i]) {\n          this[pins][i] = Object.create(null, {\n            supportedModes: {\n              enumerable: true,\n              value: Object.freeze([])\n            },\n            mode: {\n              enumerable: true,\n              get() {\n                return UNKNOWN_MODE;\n              }\n            },\n            value: {\n              enumerable: true,\n              get() {\n                return 0;\n              },\n              set() {}\n            },\n            report: {\n              enumerable: true,\n              value: 1\n            },\n            analogChannel: {\n              enumerable: true,\n              value: 127\n            }\n          });\n        }\n      }\n\n      if (enableSerial) {\n        this.serialConfig({\n          portId: this[raspiSerialModule].DEFAULT_PORT,\n          baud: 9600\n        });\n      }\n\n      this[isReady] = true;\n      this.emit('ready');\n      this.emit('connect');\n    });\n  }\n\n  reset() {\n    throw new Error('reset is not supported on the Raspberry Pi');\n  }\n\n  normalize(pin) {\n    const normalizedPin = this[raspiBoardModule].getPinNumber(pin);\n    if (typeof normalizedPin !== 'number') {\n      throw new Error(`Unknown pin \"${pin}\"`);\n    }\n    return normalizedPin;\n  }\n\n  [getPinInstance](pin) {\n    const pinInstance = this[instances][pin];\n    if (!pinInstance) {\n      throw new Error(`Unknown pin \"${pin}\"`);\n    }\n    return pinInstance;\n  }\n\n  pinMode(pin, mode) {\n    this[pinMode]({ pin, mode });\n  }\n\n  [pinMode]({ pin, mode, pullResistor = this[raspiGpioModule].PULL_NONE }) {\n    const normalizedPin = this.normalize(pin);\n    const pinInstance = this[getPinInstance](normalizedPin);\n    pinInstance.pullResistor = pullResistor;\n    const config = {\n      pin: normalizedPin,\n      pullResistor: pinInstance.pullResistor,\n      enableListener: false\n    };\n    if (this[pins][normalizedPin].supportedModes.indexOf(mode) == -1) {\n      let modeName;\n      switch(mode) {\n        case INPUT_MODE: modeName = 'input'; break;\n        case OUTPUT_MODE: modeName = 'output'; break;\n        case ANALOG_MODE: modeName = 'analog'; break;\n        case PWM_MODE: modeName = 'pwm'; break;\n        case SERVO_MODE: modeName = 'servo'; break;\n        default: modeName = 'other'; break;\n      }\n      throw new Error(`Pin \"${pin}\" does not support mode \"${modeName}\"`);\n    }\n\n    if (pin == LED_PIN) {\n      if (pinInstance.peripheral instanceof this[raspiLedModule].LED) {\n        return;\n      }\n      pinInstance.peripheral = new this[raspiLedModule].LED();\n    } else {\n      switch (mode) {\n        case INPUT_MODE:\n          pinInstance.peripheral = new this[raspiGpioModule].DigitalInput(config);\n          break;\n        case OUTPUT_MODE:\n          pinInstance.peripheral = new this[raspiGpioModule].DigitalOutput(config);\n          break;\n        case PWM_MODE:\n        case SERVO_MODE:\n          if (pinInstance.isHardwarePwm) {\n            pinInstance.peripheral = new this[raspiPwmModule].PWM(normalizedPin);\n          } else {\n            pinInstance.peripheral = new this[raspiSoftPwmModule].SoftPWM({\n              pin: normalizedPin,\n              frequency: SOFTWARE_PWM_FREQUENCY,\n              range: SOFTWARE_PWM_RANGE\n            });\n          }\n          break;\n        default:\n          console.warn(`Unknown pin mode: ${mode}`); // eslint-disable-line no-console\n          break;\n      }\n    }\n    pinInstance.mode = mode;\n  }\n\n  analogRead() {\n    throw new Error('analogRead is not supported on the Raspberry Pi');\n  }\n\n  analogWrite(pin, value) {\n    this.pwmWrite(pin, value);\n  }\n\n  pwmWrite(pin, value) {\n    const pinInstance = this[getPinInstance](this.normalize(pin));\n    if (pinInstance.mode != PWM_MODE) {\n      this.pinMode(pin, PWM_MODE);\n    }\n    pinInstance.peripheral.write(Math.round(value * pinInstance.peripheral.range / 255));\n  }\n\n  digitalRead(pin, handler) {\n    const pinInstance = this[getPinInstance](this.normalize(pin));\n    if (pinInstance.mode != INPUT_MODE) {\n      this.pinMode(pin, INPUT_MODE);\n    }\n    const interval = setInterval(() => {\n      let value;\n      if (pinInstance.mode == INPUT_MODE) {\n        value = pinInstance.peripheral.read();\n      } else {\n        value = pinInstance.previousWrittenValue;\n      }\n      if (handler) {\n        handler(value);\n      }\n      this.emit(`digital-read-${pin}`, value);\n    }, DIGITAL_READ_UPDATE_RATE);\n    pinInstance.peripheral.on('destroyed', () => {\n      clearInterval(interval);\n    });\n  }\n\n  digitalWrite(pin, value) {\n    const pinInstance = this[getPinInstance](this.normalize(pin));\n    if (pinInstance.mode === INPUT_MODE && value === HIGH) {\n      this[pinMode]({ pin, mode: INPUT_MODE, pullResistor: this[raspiGpioModule].PULL_UP });\n    } else if (pinInstance.mode === INPUT_MODE && value === LOW) {\n      this[pinMode]({ pin, mode: INPUT_MODE, pullResistor: this[raspiGpioModule].PULL_DOWN });\n    } else if (pinInstance.mode != OUTPUT_MODE) {\n      this[pinMode]({ pin, mode: OUTPUT_MODE });\n    }\n    if (pinInstance.mode === OUTPUT_MODE && value != pinInstance.previousWrittenValue) {\n      pinInstance.peripheral.write(value ? HIGH : LOW);\n      pinInstance.previousWrittenValue = value;\n    }\n  }\n\n  servoConfig(pin, min, max) {\n    let config = pin;\n    if (typeof config !== 'object') {\n      config = { pin, min, max };\n    }\n    if (typeof config.min !== 'number') {\n      config.min = DEFAULT_SERVO_MIN;\n    }\n    if (typeof config.max !== 'number') {\n      config.max = DEFAULT_SERVO_MAX;\n    }\n    const normalizedPin = this.normalize(pin);\n    this[pinMode]({\n      pin: normalizedPin,\n      mode: SERVO_MODE\n    });\n    const pinInstance = this[getPinInstance](this.normalize(normalizedPin));\n    pinInstance.min = config.min;\n    pinInstance.max = config.max;\n  }\n\n  servoWrite(pin, value) {\n    const pinInstance = this[getPinInstance](this.normalize(pin));\n    if (pinInstance.mode != SERVO_MODE) {\n      this.pinMode(pin, SERVO_MODE);\n    }\n    const dutyCycle = (pinInstance.min + (value / 180) * (pinInstance.max - pinInstance.min)) / 20000;\n    pinInstance.peripheral.write(dutyCycle * pinInstance.peripheral.range);\n  }\n\n  queryCapabilities(cb) {\n    if (this.isReady) {\n      process.nextTick(cb);\n    } else {\n      this.on('ready', cb);\n    }\n  }\n\n  queryAnalogMapping(cb) {\n    if (this.isReady) {\n      process.nextTick(cb);\n    } else {\n      this.on('ready', cb);\n    }\n  }\n\n  queryPinState(pin, cb) {\n    if (this.isReady) {\n      process.nextTick(cb);\n    } else {\n      this.on('ready', cb);\n    }\n  }\n\n  [i2cCheckAlive]() {\n    if (!this[i2c].alive) {\n      throw new Error('I2C pins not in I2C mode');\n    }\n  }\n\n  i2cConfig(options) {\n    let delay;\n\n    if (typeof options === 'number') {\n      delay = options;\n    } else {\n      if (typeof options === 'object' && options !== null) {\n        delay = options.delay;\n      }\n    }\n\n    this[i2cCheckAlive]();\n\n    this[i2cDelay] = Math.round((delay || 0) / 1000);\n\n    return this;\n  }\n\n  i2cWrite(address, cmdRegOrData, inBytes) {\n    this[i2cCheckAlive]();\n\n    // If i2cWrite was used for an i2cWriteReg call...\n    if (arguments.length === 3 &&\n        !Array.isArray(cmdRegOrData) &&\n        !Array.isArray(inBytes)) {\n      return this.i2cWriteReg(address, cmdRegOrData, inBytes);\n    }\n\n    // Fix arguments if called with Firmata.js API\n    if (arguments.length === 2) {\n      if (Array.isArray(cmdRegOrData)) {\n        inBytes = cmdRegOrData.slice();\n        cmdRegOrData = inBytes.shift();\n      } else {\n        inBytes = [];\n      }\n    }\n\n    const buffer = new Buffer([cmdRegOrData].concat(inBytes));\n\n    // Only write if bytes provided\n    if (buffer.length) {\n      this[i2c].writeSync(address, buffer);\n    }\n\n    return this;\n  }\n\n  i2cWriteReg(address, register, value) {\n    this[i2cCheckAlive]();\n\n    this[i2c].writeByteSync(address, register, value);\n\n    return this;\n  }\n\n  [i2cRead](continuous, address, register, bytesToRead, callback) {\n    this[i2cCheckAlive]();\n\n    // Fix arguments if called with Firmata.js API\n    if (arguments.length == 4 &&\n      typeof register == 'number' &&\n      typeof bytesToRead == 'function'\n    ) {\n      callback = bytesToRead;\n      bytesToRead = register;\n      register = null;\n    }\n\n    callback = typeof callback === 'function' ? callback : () => {};\n\n    let event = `i2c-reply-${address}-`;\n    event += register !== null ? register : 0;\n\n    const read = () => {\n      const afterRead = (err, buffer) => {\n        if (err) {\n          return this.emit('error', err);\n        }\n\n        // Convert buffer to Array before emit\n        this.emit(event, Array.prototype.slice.call(buffer));\n\n        if (continuous) {\n          setTimeout(read, this[i2cDelay]);\n        }\n      };\n\n      this.once(event, callback);\n\n      if (register !== null) {\n        this[i2c].read(address, register, bytesToRead, afterRead);\n      } else {\n        this[i2c].read(address, bytesToRead, afterRead);\n      }\n    };\n\n    setTimeout(read, this[i2cDelay]);\n\n    return this;\n  }\n\n  i2cRead(...rest) {\n    return this[i2cRead](true, ...rest);\n  }\n\n  i2cReadOnce(...rest) {\n    return this[i2cRead](false, ...rest);\n  }\n\n  sendI2CConfig(...rest) {\n    return this.i2cConfig(...rest);\n  }\n\n  sendI2CWriteRequest(...rest) {\n    return this.i2cWrite(...rest);\n  }\n\n  sendI2CReadRequest(...rest) {\n    return this.i2cReadOnce(...rest);\n  }\n\n  serialConfig({ portId, baud }) {\n    if (!this[raspiSoftPwmModule]) {\n      throw new Error('Serial support is disabled');\n    }\n    if (!this[isSerialOpen] || (baud && baud !== this[serial].baudRate)) {\n      this[addToSerialQueue]({\n        type: SERIAL_ACTION_CONFIG,\n        portId,\n        baud\n      });\n    }\n  }\n\n  serialWrite(portId, inBytes) {\n    if (!this[raspiSoftPwmModule]) {\n      throw new Error('Serial support is disabled');\n    }\n    this[addToSerialQueue]({\n      type: SERIAL_ACTION_WRITE,\n      portId,\n      inBytes\n    });\n  }\n\n  serialRead(portId, maxBytesToRead, handler) {\n    if (!this[raspiSoftPwmModule]) {\n      throw new Error('Serial support is disabled');\n    }\n    if (typeof maxBytesToRead === 'function') {\n      handler = maxBytesToRead;\n      maxBytesToRead = undefined;\n    }\n    this[addToSerialQueue]({\n      type: SERIAL_ACTION_READ,\n      portId,\n      maxBytesToRead,\n      handler\n    });\n  }\n\n  serialStop(portId) {\n    if (!this[raspiSoftPwmModule]) {\n      throw new Error('Serial support is disabled');\n    }\n    this[addToSerialQueue]({\n      type: SERIAL_ACTION_STOP,\n      portId\n    });\n  }\n\n  serialClose(portId) {\n    if (!this[raspiSoftPwmModule]) {\n      throw new Error('Serial support is disabled');\n    }\n    this[addToSerialQueue]({\n      type: SERIAL_ACTION_CLOSE,\n      portId\n    });\n  }\n\n  serialFlush(portId) {\n    if (!this[raspiSoftPwmModule]) {\n      throw new Error('Serial support is disabled');\n    }\n    this[addToSerialQueue]({\n      type: SERIAL_ACTION_FLUSH,\n      portId\n    });\n  }\n\n  [addToSerialQueue](action) {\n    if (action.portId !== this[raspiSerialModule].DEFAULT_PORT) {\n      throw new Error(`Invalid serial port \"${action.portId}\"`);\n    }\n    this[serialQueue].push(action);\n    this[serialPump]();\n  }\n\n  [serialPump]() {\n    if (this[isSerialProcessing] || !this[serialQueue].length) {\n      return;\n    }\n    this[isSerialProcessing] = true;\n    const action = this[serialQueue].shift();\n    const finalize = () => {\n      this[isSerialProcessing] = false;\n      this[serialPump]();\n    };\n    switch (action.type) {\n      case SERIAL_ACTION_WRITE:\n        if (!this[isSerialOpen]) {\n          throw new Error('Cannot write to closed serial port');\n        }\n        this[serial].write(action.inBytes, finalize);\n        break;\n\n      case SERIAL_ACTION_READ:\n        if (!this[isSerialOpen]) {\n          throw new Error('Cannot read from closed serial port');\n        }\n        // TODO: add support for action.maxBytesToRead\n        this[serial].on('data', (data) => {\n          action.handler(bufferToArray(data));\n        });\n        process.nextTick(finalize);\n        break;\n\n      case SERIAL_ACTION_STOP:\n        if (!this[isSerialOpen]) {\n          throw new Error('Cannot stop closed serial port');\n        }\n        this[serial].removeAllListeners();\n        process.nextTick(finalize);\n        break;\n\n      case SERIAL_ACTION_CONFIG:\n        this[serial].close(() => {\n          this[serial] = new this[raspiSerialModule].Serial({\n            baudRate: action.baud\n          });\n          this[serial].open(() => {\n            this[serial].on('data', (data) => {\n              this.emit(`serial-data-${action.portId}`, bufferToArray(data));\n            });\n            this[isSerialOpen] = true;\n            finalize();\n          });\n        });\n        break;\n\n      case SERIAL_ACTION_CLOSE:\n        this[serial].close(() => {\n          this[isSerialOpen] = false;\n          finalize();\n        });\n        break;\n\n      case SERIAL_ACTION_FLUSH:\n        if (!this[isSerialOpen]) {\n          throw new Error('Cannot flush closed serial port');\n        }\n        this[serial].flush(finalize);\n        break;\n\n      default:\n        throw new Error('Internal error: unknown serial action type');\n    }\n  }\n\n  sendOneWireConfig() {\n    throw new Error('sendOneWireConfig is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireSearch() {\n    throw new Error('sendOneWireSearch is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireAlarmsSearch() {\n    throw new Error('sendOneWireAlarmsSearch is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireRead() {\n    throw new Error('sendOneWireRead is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireReset() {\n    throw new Error('sendOneWireConfig is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireWrite() {\n    throw new Error('sendOneWireWrite is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireDelay() {\n    throw new Error('sendOneWireDelay is not supported on the Raspberry Pi');\n  }\n\n  sendOneWireWriteAndRead() {\n    throw new Error('sendOneWireWriteAndRead is not supported on the Raspberry Pi');\n  }\n\n  setSamplingInterval() {\n    throw new Error('setSamplingInterval is not yet implemented');\n  }\n\n  reportAnalogPin() {\n    throw new Error('reportAnalogPin is not yet implemented');\n  }\n\n  reportDigitalPin() {\n    throw new Error('reportDigitalPin is not yet implemented');\n  }\n\n  pingRead() {\n    throw new Error('pingRead is not yet implemented');\n  }\n\n  pulseIn() {\n    throw new Error('pulseIn is not yet implemented');\n  }\n\n  stepperConfig() {\n    throw new Error('stepperConfig is not yet implemented');\n  }\n\n  stepperStep() {\n    throw new Error('stepperStep is not yet implemented');\n  }\n}\n"]}